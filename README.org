#+TITLE: read-only-cfg
#+AUTHOR: pfchen
#+DATE: <2021-04-23 Fri>


* Introduction

  ~read-only-cfg~ is a GNU Emacs minor mode that can automatically make
   files read-only based on user configuration. User configuration is
   very simple and only consists of prefix directories or regex patterns.

* Installation

** MELPA [[https://melpa.org/#/read-only-cfg][file:https://melpa.org/packages/read-only-cfg-badge.svg]]

   The package is available on ~MELPA~. To use the ~MELPA~ repository,
   you can add the following codes to your init.el.
   #+BEGIN_SRC elisp
     (require 'package)
     (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
     (package-initialize)
     (package-refresh-contents)
   #+END_SRC

   Now you can install ~read-only-cfg~ with:
   #+BEGIN_SRC elisp
     M-x package-install RET read-only-cfg RET
   #+END_SRC

   And enable with:
   #+BEGIN_SRC elisp
     (require 'read-only-cfg)
     (read-only-cfg-mode 1)
   #+END_SRC

** Manual Installation

   Download or clone this repository locally, and add this to your init.el:
   #+BEGIN_SRC elisp
     (add-to-list 'load-path "/path/to/read-only-cfg")
     (autoload 'read-only-cfg "read-only-cfg" nil t)
     (require 'read-only-cfg)
     (read-only-cfg-mode 1)
   #+END_SRC

* Usage

  Add a read-only directory:
  #+BEGIN_SRC elisp
    M-x read-only-cfg-add-dir RET /path/to/your-directory RET
  #+END_SRC

  Add a read-only regex pattern:
  #+BEGIN_SRC elisp
    M-x read-only-cfg-add-regexp RET <regexp> RET
  #+END_SRC

  Or add these into your config:
  #+BEGIN_SRC elisp
    (require 'read-only-cfg)
    (read-only-cfg-add-dir "/path/to/your-directory/")
    (read-only-cfg-add-regexp "<regexp>")
  #+END_SRC

  And remove a read-only directory:
  #+BEGIN_SRC elisp
    M-x read-only-cfg-remove-dir RET /path/to/your-directory RET
  #+END_SRC

  Remove a read-only regex pattern:
  #+BEGIN_SRC elisp
    M-x read-only-cfg-remove-regexp RET <regexp> RET
  #+END_SRC

** Customization

  Customize variable ~read-only-cfg-update-file-buffer-state~ to
  determine whether to update the read-only state of all existing
  file-buffer when this mode is enabled or disabled.
